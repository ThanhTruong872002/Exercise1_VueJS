1. Binding:
   = Value binding: {{}}

- property binding:
- v-bind:[ten thuoc tinh] ="bien" ===> viet tat bằng dấu :
- claas và style: ==> :class hoặc :style (class sẽ phụ thuộc vào biến đã tạo) ====> ví dụ: :class ="daChon: selected"

2. Model:

- Liên Kết element với 1 properties

3. EventHandling

- Bắt sự kiện từ các element
- Cú pháp: ==> v-on ===> ví dụ: v-on:click = "chanel.name === 123" ====> viết tắt là @click
- Prevent default event: hủy bỏ mặc định của element ====> ví dụ:<Button type submit @click.prevent.default = "channel.name === 123"Button>

4. ref: ánh xạ đén chính element đó

<div id="className"></div>

Nếu như làm javascript để lấy được id của 1 element phải sử dụng var a = document.getElementById('className')

Còn sử dụng ref của Vuejs thì chỉ cần khai báo: <div ref="className"></div> 
Dể sử dụng ref:  this.$refs.className => element html

6. Conditional rendering

    + v-show: ẩn hoặc hiện theo điều kiện, ví dụ khai báo isShow = true và dùng <div v-show = isShow >Nếu là true thì sẽ hiện</div>

    + v-hide: ngược lại của v-show (true sẽ ẩn false sẽ hiện)

    + v-if: giống v-show nhưng v-if sẽ làm mất element còn v-show thì sẽ thêm thuộc tính display: none vào element

7. List rendering

    + v-for: 

8. Method: 
    
    + methods: hàm của vue Object để thực hiện các function xử lí 

9. Watch:

    + watch: theo dõi sự thay đổi của data

10. Hooks:

    + mounted: để gọi api là chính 

11. Props: dữ liệu đẩy từ component cha ==> component con 

    + Dùng mảng tên các props được khai báo trong <script>

    props: ['taskData']

12. Filter: dữ liệu ở dưới data khi truyền lên để render ra giao diện thì sẽ đi qua filter nằm ở giữa để formart hay sắp xếp... sau đó sẽ đc render ra giao diện 

ví dụ: ở data số tiền là 1000000000 nhưng khi render ra giao diện chúng ta muốn là 1,000,000,000

<div> {{tongTien | dauChamPhanTach}} </div>

data() {
    return {
        tongTien: 1000000000
    }
},

filters: {
    dauChamPhanTach: function(soTien) {
        return soTien.toFixed(2).replace(/\d(?=(\.....)))
    }
}



13. Ref:

    + Là một API để tạo ra các biến reactive đơn giản.
    + Có thể sử dụng với bất kỳ kiểu dữ liệu nào, bao gồm cả các kiểu dữ liệu nguyên thủy như string, number, boolean.
    + Tạo ra một object mutable, có thể thay đổi giá trị trực tiếp.
    + Khi sử dụng trong template, không cần sử dụng .value vì nó được tự động unwrap.

*Khi nào nên sử dụng ref:

    + Khi cần tạo ra một biến reactive đơn giản, ví dụ như một string, number hoặc boolean.
    + Khi cần thay đổi giá trị của biến reactive trực tiếp.


14. Reactive:

    + Là một API để tạo ra các object reactive.
    + Chỉ có thể sử dụng với các object, bao gồm object, array, map và set.
    + Tạo ra một object proxy, bất kỳ thay đổi nào trên object gốc đều được phản ánh trong proxy.
    + Khi sử dụng trong template, cần sử dụng .value để truy cập giá trị.


* Khi nào nên sử dụng reactive: 

    Khi cần tạo ra một object reactive.
    Khi cần theo dõi các thay đổi trên object và cập nhật giao diện người dùng.



+Ref:
    Khi bạn update giá trị của ref bên trong child component, Vue.js sẽ không tự động cập nhật giao diện người dùng.

    Để khắc phục vấn đề này, bạn cần sử dụng emit để emit một event từ child component và listen event đó trong parent component để cập nhật giá trị của ref.

+Reactive value:
    Khi bạn update giá trị của reactive value bên trong child component, Vue.js sẽ tự động cập nhật giao diện người dùng.

Lý do:

Ref:
Ref là một object mutable, và Vue.js không thể theo dõi các thay đổi trực tiếp trên object mutable.

Reactive value:
Reactive value là một object proxy, và Vue.js có thể theo dõi các thay đổi trên object proxy.

Kết luận:

Nếu bạn cần update giá trị của ref bên trong child component, bạn cần sử dụng emit và listen event.
Nếu bạn cần update giá trị của reactive value bên trong child component, bạn không cần làm gì thêm, Vue.js sẽ tự động cập nhật giao

